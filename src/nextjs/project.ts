import {javascript, TextFile, web, YamlFile} from 'projen'
// eslint-disable-next-line import/no-relative-parent-imports -- projen jsii project compilation does not pick up path aliases. Thus relative import are used as a safe alternative.
import {PullRequestTest} from '../github/pull-request-test'
import {configureJest, DEFAULT_CONFIG_FILENAME} from './jest'
import {indexPage, indexPageTest, SampleCode} from './SampleCode'

/**
 * Project that wraps NextJsTypeScriptProject and adds specific configurations and sample code.
 *
 * ID shall be different from IDs used by internal projen classes.
 * @pjid ottofeller-nextjs
 */
export class OttofellerNextJs extends web.NextJsTypeScriptProject {
  constructor(options: web.NextJsTypeScriptProjectOptions) {
    super({
      ...options,
      docgen: false,
      packageManager: javascript.NodePackageManager.NPM,
      sampleCode: false,

      // GitHub CI setup
      github: true,
      githubOptions: {
        mergify: false,
        pullRequestLint: false,
      },
      buildWorkflow: false,
      release: false,
      depsUpgrade: false,
      jest: true,
      jestOptions: {
        configFilePath: DEFAULT_CONFIG_FILENAME,
        junitReporting: false,
      },
    })

    this.addDeps(
      '@apollo/client',
      '@tailwindcss/line-clamp',
      'classnames',
      'cookie-parser',
      'dayjs',
      'dotenv',
      'graphql-request',
      'jsonwebtoken',
      'next-cookies',
      'next-env',
      'next-with-apollo',
      'react-hook-form',
      'react-portal',
      'yup',
    )

    this.addDevDeps(
      '@graphql-codegen/add',
      '@graphql-codegen/cli',
      '@graphql-codegen/import-types-preset',
      '@graphql-codegen/introspection',
      '@graphql-codegen/named-operations-object',
      '@graphql-codegen/typescript',
      '@graphql-codegen/typescript-graphql-request',
      '@graphql-codegen/typescript-operations',
      '@graphql-codegen/typescript-react-apollo',
      '@ottofeller/dangerules',
      '@ottofeller/eslint-config-ofmt',
      '@ottofeller/ofmt',
      '@ottofeller/prettier-config-ofmt',
      '@testing-library/react',
      '@types/jest',
      'ajv',
      'danger',
      'empty',
      'eslint',
      'eslint-plugin-graphql',
      'graphql',
      'jest',
      'jest-environment-jsdom',
      'jest-fetch-mock',
      'jest-transform-stub',
      'npm-run-all',
      'postcss',
      'react-test-renderer',
      'stylelint',
      'stylelint-declaration-block-no-ignored-properties',
      'stylelint-images',
      'stylelint-order',
    )

    // javascript.NpmConfig class sets only registry. Hence a need for manual file creation.
    new TextFile(this, '.npmrc', {
      lines: [
        '# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        'fund=false',
        'loglevel=error',
        'engine-strict=true',
        'send-metrics=false',
        'legacy-peer-deps=true',
      ],
    })

    // Next configures Jest with a function that looks into the project. Therefore static config won't work.
    configureJest(this)

    if (this.github) {
      new PullRequestTest(this.github)
    }

    new YamlFile(this, 'codegen.yml', {
      obj: {
        overwrite: true,
        schema: './schema.json',

        generates: {
          'generated/types.ts': {
            documents: ['src/**/graphql/*.{ts,tsx}'],
            plugins: ['typescript', 'typescript-operations'],
          },

          'generated/frontend.ts': {
            documents: ['src/**/graphql/*.tsx'],
            preset: 'import-types',
            presetConfig: {typesPath: './types'},
            plugins: ['typescript-react-apollo'],
          },

          'generated/api.ts': {
            documents: ['src/**/graphql/*.ts'],
            preset: 'import-types',
            presetConfig: {typesPath: './types'},
            plugins: [
              // 'typescript-operations' plugin is needed here because of buggy behavior of 'typescript-graphql-request'.
              // The latter does not work properly with 'import-types' preset and does not import operation types.
              // There is an open issue:
              // https://github.com/dotansimha/graphql-code-generator/issues/5285
              // In this setup the types generated here are duplicates of 'types.ts' and thus preferable to be imported from there.
              'typescript-operations',
              'typescript-graphql-request',
            ],
          },

          './schema.json': {plugins: ['introspection']},
        },
      },
    })

    new SampleCode(this, 'index.tsx', indexPage)
    new SampleCode(this, '__tests__/index.tsx', indexPageTest)
  }
}
