import {ApolloServer} from '@apollo/server'
import {startStandaloneServer} from '@apollo/server/standalone'
import {mergeResolvers, mergeTypeDefs} from '@graphql-tools/merge'
import {makeExecutableSchema} from '@graphql-tools/schema'
import tracer from 'dd-trace'
import dotenv from 'dotenv'
import {gql} from 'graphql-tag'
import sourceMapSupport from 'source-map-support'
import {createLogger} from './logger/create-logger'

// ANCHOR Tracer
if (process.env.NODE_ENV === 'production') {
  tracer.init({logInjection: true, service: process.env.SERVICE_NAME})
}

sourceMapSupport.install({environment: 'node'})
dotenv.config({path: './.env.local'})
dotenv.config({path: './.env.development'})

// ANCHOR Schema
const schema = makeExecutableSchema({
  resolvers: mergeResolvers([]),

  typeDefs: mergeTypeDefs([
    gql`
      type Query {
        _emptyQuery: String
      }
      type Mutation {
        _emptyMutation: String
      }
    `,
  ]),
})

// ANCHOR The server
type AppContext = {
  logger: ReturnType<typeof createLogger>
}

const init = async () => {
  const logger = await createLogger()
  const server = new ApolloServer<AppContext>({schema, introspection: true})

  const {url} = await startStandaloneServer(server, {
    context: async (params): Promise<AppContext> => {
      if (params.req.headers['x-access-token'] !== process.env.ACCESS_TOKEN) {
        throw new Error('Wrong or missing x-access-token header.')
      }

      return {
        logger,
      }
    },
    listen: {port: Number(process.env.APP_PORT) || 3000},
  })

  console.log(`ðŸš€ Server ready at ${url}`)
}

init()
